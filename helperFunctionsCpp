// PRINT 1D VECTOR
void print1dVector(vector<int> v)
{
	int m = v.size();
	for(int i=0 ;i<m; i++){
    std::cout<<v[i]<<" ";
  }
	std::cout<<std::endl;
}

// PRINT 2D VECTOR
void print2dVector(vector<vector<int>> v)
{
	int m = v.size();
	int n = v[0].size();
	for(int i=0 ;i<m; i++)
  {
		for(int j=0; j<n; j++)
    {
	    std::cout<<v[i][j]<<" ";
    }
    std::cout<<std::endl;
  }
}

// SWAP TWO INTS
void swapInts(int &a, int &b){	
	int temp = a;
	a = b;
	b=temp;
}

// RETURN MIN OF TWO INTS
int intMin(int a, int b){
	if(a>b) return b;
	return a;
}

// RETURN MAX OF TWO INTS
int intMax(int a, int b){
	if(a>b) return a;
	return b;
}

// BUBBLE SORTING VECTOR OF INTS (COMPARISON ADJACENT ELEMENT AND SWAP)
void bubbleSort(vector<int> &v){
    int n=v.size();
    
    for(int i=0; i<n; i++){
        for(int j=0; j<n-1; j++){
            if(v[j]>v[j+1]){
                int temp = v[j];
                v[j]=v[j+1];
                v[j+1]=temp;
            }
        }
    }
}


// SELECTION SORT (SELECT THE SMALLEST AND PUT IN FRONT)
#include<limits.h>
void selectionSort(vector<int> &v){
    int n=v.size();
    int smallest = INT_MAX;
    int idx = -1;
    
    for(int i=0; i<n-1; i++){
        smallest = v[i];
        idx = i;
        for(int j=i+1; j<n; j++){
            if(smallest > v[j]){
                smallest = v[j];
                idx = j;
            }
        }
        v[idx] = v[i];
        v[i] = smallest;
    }
}

// INSERTION SORT (CHECK IF ELEMENT IS SMALLER THAN PREVIOUS ELEMENT, THEN MOVE TO FRONT)
void insertionSort(vector<int> &v){
    int n=v.size();
    int temp=0;
    for(int i=1; i<n; i++){
        while(i>=1 && v[i]<v[i-1]){
            temp = v[i];
            v[i]=v[i-1];
            v[i-1]=temp;
            i--;
        }
    }
}
